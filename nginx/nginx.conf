user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;




    include /etc/nginx/conf.d/*.conf;
}

# This is for redis
stream {

    upstream redis_a_upstream {
        server  redis-a:6379;
    }
 
    upstream redis_b_upstream {
        server  redis-b:6379;
    }

    # Use the Redis upstream currently designated as Green
    # Use this port when making an East/West call from something that is not yet Blue/Green
    server {
        listen  6379;

        set $redisUpstream 'redis_a_upstream';

        # # system_a is currently Green
        # if (!-f /etc/nginx/blue-green/b-is-green.txt) {
        #     set $redisUpstream 'redis_a_upstream';
        # }

        # # system_b is currently Green    
        # if (-f /etc/nginx/blue-green/b-is-green.txt) {
        #     set $redisUpstream 'redis_b_upstream';
        # }

        proxy_pass  $redisUpstream;
    }

    # Always goes to Redis A
    # Use this port when making an East/West call from a "System A" machine outside of kubernetes
    server {
        listen  16379;
        proxy_pass  redis_a_upstream;
    }    

    # Always goes to Redis B
    # Use this port when making an East/West call from a "System B" machine outside of kubernetes
    server {
        listen  26379;
        # TODO: Put this in an "if{}" directive and apply blue/green
        proxy_pass  redis_b_upstream;
    }      

    # upstream backend {
    #     hash $remote_addr consistent;

    #     server backend1.example.com:12345 weight=5;
    #     server 127.0.0.1:12345            max_fails=3 fail_timeout=30s;
    #     server unix:/tmp/backend3;
    # }

    # upstream dns {
    #    server 192.168.0.1:53535;
    #    server dns.example.com:53;
    # }

    # server {
    #     listen 12345;
    #     proxy_connect_timeout 1s;
    #     proxy_timeout 3s;
    #     proxy_pass backend;
    # }

    # server {
    #     listen 127.0.0.1:53 udp reuseport;
    #     proxy_timeout 20s;
    #     proxy_pass dns;
    # }

    # server {
    #     listen [::1]:12345;
    #     proxy_pass unix:/tmp/stream.socket;
    # }
}